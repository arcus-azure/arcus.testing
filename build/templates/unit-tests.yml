jobs:
  - job: UnitTests
    displayName: 'Run unit tests'
    pool:
      vmImage: '$(Vm.Image)'
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download build artifacts'
        inputs:
          artifact: 'Build'
          path: '$(Build.SourcesDirectory)'

      - task: UseDotNet@2
        displayName: 'Import .NET SDK ($(DotNet.Sdk.VersionBC))'
        inputs:
          packageType: 'sdk'
          version: '$(DotNet.Sdk.VersionBC)'

      - task: UseDotNet@2
        displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
        inputs:
          packageType: 'sdk'
          version: '$(DotNet.Sdk.Version)'
          includePreviewVersions: $(DotNet.Sdk.IncludePreviewVersions)

      # - task: DotNetCoreCLI@2
      #   displayName: 'Run unit tests'
      #   inputs:
      #     command: test
      #     projects: 'src/**/$(Project).Tests.Unit.csproj'
      #     arguments: '--configuration $(Build.Configuration) --collect:"XPlat Code Coverage"'
      #     nobuild: true
      #     publishTestResults: true
      #     mergeTestResults: true
      - script: |
          dotnet test src/**/$(Project).Tests.Unit.csproj --configuration $(Build.Configuration) --collect:"XPlat Code Coverage" --logger trx --results-directory $(Pipeline.Workspace)
        displayName: 'Run unit tests'

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '$(Pipeline.Workspace)/*.trx'

      # - task: CopyFiles@2
      #   displayName: 'Copy build artifacts'
      #   inputs:
      #     contents: '$(Agent.TempDirectory)/**'
      #     targetFolder: '$(Pipeline.Workspace)/coverage-unit'

      - task: PublishPipelineArtifact@0
        displayName: 'Publish code coverage artifacts'
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifactName: Coverage-Unit