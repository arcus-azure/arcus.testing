parameters:
  azureServiceConnection: ''

jobs:
  - job: IntegrationTests
    displayName: 'Run integration tests'
    pool:
      vmImage: '$(Vm.Image)'
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download build artifacts'
        inputs:
          artifact: 'Build'
          path: '$(Build.SourcesDirectory)'

      - task: UseDotNet@2
        displayName: 'Import .NET SDK ($(DotNet.Sdk.VersionBC))'
        inputs:
          packageType: 'sdk'
          version: '$(DotNet.Sdk.VersionBC)'

      - task: AzureCLI@2
        displayName: 'Import secrets from Azure Key Vault'
        env:
          ARCUS_KEYVAULT_NAME: $(Arcus.Testing.KeyVault.Name)
        inputs:
          azureSubscription: '${{ parameters.azureServiceConnection }}'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          addSpnToEnvironment: true
          inlineScript: |
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            Install-Module -Name Arcus.Scripting.DevOps -AllowClobber

            # TODO: get Key Vault secret and set it as secret pipeline variable.
            Set-AzDevOpsVariable -Name 'Arcus.Testing.TenantId' -Value $env:tenantId
            Set-AzDevOpsVariable -Name 'Arcus.Testing.ServicePrincipal.ClientId' -Value $env:servicePrincipalId
            Set-AzDevOpsVariable -Name 'Arcus.Testing.ServicePrincipal.ClientSecret' -Value $env:servicePrincipalKey

      - task: UseDotNet@2
        displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
        inputs:
          packageType: 'sdk'
          version: '$(DotNet.Sdk.Version)'
          includePreviewVersions: $(DotNet.Sdk.IncludePreviewVersions)

      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: test
          projects: 'src/**/$(Project).Tests.Unit.csproj'
          arguments: '--configuration $(Build.Configuration) --collect:"XPlat Code Coverage"'
          nobuild: true
          publishTestResults: true
          mergeTestResults: true

      - task: qetza.replacetokens.replacetokens-task.replacetokens@6
        displayName: 'Replace integration test tokens'
        inputs:
          root: 'src/$(Project).Tests.Integration/'
          sources: 'appsettings.json'
          missingVarLog: 'error'
          logLevel: 'debug'
          addBOM: true
          tokenPrefix: '#{'
          tokenSuffix: '}#'

      - task: DotNetCoreCLI@2
        displayName: 'Run integration tests'
        inputs:
          command: test
          projects: 'src/**/$(Project).Tests.Integration.csproj'
          arguments: '--configuration $(Build.Configuration) --collect:"XPlat Code Coverage"'
          nobuild: true
          publishTestResults: true
          mergeTestResults: true

      - task: reportgenerator@5
        displayName: ReportGenerator
        inputs:
          reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
          targetdir: coveragereport
          reporttypes: Html;HtmlInline_AzurePipelines_Dark;Cobertura;MarkdownDeltaSummary
          publishCodeCoverageResults: true

      - task: BuildQualityChecks@8
        displayName: 'Check code quality'
        inputs:
          checkCoverage: true
          coverageFailOption: fixed
          coverageThreshold: 80

      - powershell: |
          # Check if GitHub CLI is installed
          if (-not (Get-Command gh -ErrorAction SilentlyContinue)) {
              # Download and install GitHub CLI
              Invoke-WebRequest -Uri "https://github.com/cli/cli/releases/latest/download/gh_2.0.0_windows_amd64.msi" -OutFile "$env:TEMP\gh.msi"
              Start-Process msiexec.exe -ArgumentList "/i $env:TEMP\gh.msi /quiet /norestart" -Wait
          }
          
          # Authenticate with GitHub CLI
          echo $env:GITHUB_TOKEN | gh auth login --with-token
          
          # Check for existing code coverage comment
          $prNumber = $env:System.PullRequest.PullRequestNumber
          $existingComment = gh pr view $prNumber --json comments --jq '.comments[].body' | Select-String -Pattern 'Delta Summary'
          
          $coverage_report = Get-Content "$(Build.SourcesDirectory)/coveragereport/Summary.md" -Raw

          # Post or update the comment with the code coverage report
          if (-not $existingComment) {
              gh pr comment $prNumber --body $coverage_report
          } else {
              $commentId = gh pr view $prNumber --json comments --jq '.comments[] | select(.body | contains("Delta Summary")) | .id'
              gh pr comment update $commentId --body $coverage_report
          }
        displayName: 'Post Code Coverage Report on PR'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          System.PullRequest.PullRequestNumber: $(System.PullRequest.PullRequestNumber)
    